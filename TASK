Итоговое задание
В задании требуется написать приложение, моделирующее работу информационной системы автоматизации документооборота медицинского реабилитационного учреждения. Ниже более подробно описаны предметная область и технические требования.
Предметная область
Существуют следующие виды сущностей:
-	Пациент
•	Имя
•	Диагноз
•	Номер страховки
•	Лечащий врач
•	Статус (лечится/выписан)
•	Назначение
-	Пациент
•	Тип (процедура/лекарство)
•	Временной паттерн (дважды в день – утром и вечером, например)
•	Период
•	Доза (если лекарство)
Пример назначения процедуры: физиотерапия 2 раза в неделю по вторникам и четвергам.
Пример назначения лекарства: давать аспирин 2 раза в день утром и вечером.
-	Событие
•	Пациент
•	Дата и время
•	Статус (запланировано/выполнено/отменено)
•	Процедура/лекарство
Пример: запланировано дать Иванову 1 таблетку аспирина 10 марта 2019 в 9:00.
•	Процедуры и лекарства
o	Название
o	Тип

Приложение должно обеспечивать следующую функциональность:
•	Для врачей клиники
o	Добавление пациента
o	Выписка пациента (подразумевает завершение всех назначений с момента выписки)
o	Назначение процедур и лекарств
o	Редактирование назначений (изменение периода, дозы, паттерна)
o	Отмена назначений
При создании назначения необходимо сгенерировать все предусмотренные им события. Например, в случае с назначением делать физиотерапию 2 раза в неделю по вторникам и четвергам с периодом на 2 недели должно сгенерироваться 4 события.
При отмене назначения, все ещё не выполненные предусмотренные им события должны быть отменены.
•	Для медсестёр клиники
o	Просмотр всех событий.
o	Фильтрация событий по дате (на сегодня, на ближайший час) и по пациенту.
o	Изменение статуса событий из «запланировано» в «выполнено» и из «запланировано» в «отменено».
При переводе события в статус «отменено» медсестре необходимо указать причину отмены: пациент плохо себя чувствовал, не было технической возможности выполнить назначение и т.д.
Технические требования
В итоге требуется получить многопользовательское приложение типа клиент-сервер с соединением по сети.
Все данные хранятся на стороне сервера. Каждый клиент может загружать некоторые данные, после каждой операции изменения данные должны быть синхронизованы с сервером.
Клиент должен иметь графический интерфейс.
Приложение должно обрабатывать аппаратные и программные ошибки.
Используемые технологии:
	IDE - Any (Eclipse, IDEA)
	Tomcat
	DB – MySQL
	Maven
	JPA
	Spring Framework (кроме Boot, Data)
	JSP
II часть
Реализовать отдельное клиент-приложение для электронного табло. Приложение должно отображать список всех событий, назначенных на текущий день. Данные должны подгружаться при старте и храниться на стороне клиента. Перезагрузка данных осуществляется в случае получения уведомления от сервера об изменениях в списке событий (добавлены новые или отменены старые).

Используемые технологии:
	Maven
	AS – WildFly
	EJB
	JSF
	MQ (для уведомлений от сервера)
	WebServices (для обмена данных между клиентом и сервером)
Критерии успешного выполнения
1.	Функциональность работает (обязательно наличие UI)
2.	Maven-based проект, разбитый на модули (билд одной командой, деплой одной командой)
3.	Описаны интерфейсы предметной области
4.	Подключена БД MySQL
5.	Созданы сущности предметной области; маппинг на таблицы в БД
6.	Работа с сущностями через DAO
7.	Приложение развернуто на AS
8.	Реализована обработка исключений
9.	Подключено логгирование
10. Наличие technical solution description
11. Наличие unit-тестов на бизнес логику

Подключение любого фреймворка/библиотеки принимаются в зачет только при условии выполнения пунктов, описанных выше.
Lombock – допускается. Spring Boot и Data допустимы для использования во 2й части обучения.
Рекомендуем использовать последнюю стабильную версию технологий, обязательных к использованию.
Плюсом будет использование следующих технологий: Selenium, Sonar, Angular/React (например, админка для табло), Docker, Microservices, использования доступного cloud для развертывания приложения (например, https://cloud.yandex.ru/ - 1 месяц бесплатного использования)  и/или наличие «killer features».

